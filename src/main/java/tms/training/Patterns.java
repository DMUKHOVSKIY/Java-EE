package tms.training;

public class Patterns {
    //Структурные паттерны: (Отвечают за построение удобных в поддержке иерархий классов)/(композиция, наследование)
    //Адаптер (Один объект отдает данные другому, но у 2 тип не совместим с передаваемым типом) (Пример: переходник в зарядуке)
    //Фасад (Большой проект и вызывается много методов: скрываем вызовы за одним вызовом)(Пример: нажимаем 1 кнопку включения ПК и где-то в материнской плате вызывается 5-10 других методов, но это скрыто)
    //Декоратор (Позволяет добавлять новую функциональность не расширяя класс, куда нужно добавить эту функциональность
    //не в ущерб основной фунциональности/декоратор принимает основной класс функциональности (он как обёртка)) (Пример: хотим добавить сохранене кэша к нашему классу, не изменяя класс)

    //Поведенческие паттерны: (Решают задачи эффективного и безопасного взаимодействия между объектами)
    //Итератор
    //Шаблонный метод
}

package tms;

public class Class {
    //Транзакция — это набор операций по работе с базой данных (БД), объединенных в одну атомарную пачку.
    //Нормализация БД - набор правил, которым надо следовать, чтобы наши данные грамотно находились в таблицах и грамотно
    //были связаны, чтобы повысить производительность, чтобы поиск быстрее работал и не тормазил.
    //JDBC - интерфейс для работы с реляционными базами данных в Java
    //Для интерфейса нужна реализация - драйвер(драйвер пишут программисты, которые разрабатывают определенную БД)
    //БД - отдельная программа, которую надо установить на ПК (PostgreSQL, MySQL)
    //Выходит у БД есть порт, к которому мы подключаемся (Наша программа - клиент, БД - сервер)
    //У разных БД - разные диалекты (разница между один и тем же SQL) (главные операторы - одинаковые)
    //Язык для работы с БД - SQL (он один)
    //Харкодить - задавать сущности значение вручную, статично, вместо динамичной передачи.

    //ACID(4 требования к транзакционной системе, обеспечивающее наиболее надежную и предсказуемую работу):
    //1)Atomicity(атомарность - Или транзакция целиком, или ничего)
    //Если мы выполняем какой-то кусок кода в Java, который работает с БД и в этом куске кода 2 или более операторов,
    //которые вносят изменения в БД, они все должны быть выполнены как одно целое или не выполнены вообще.
    //2)Consistency(согласованность - Сохраняются только достоверные данные)
    //Все поля должны друг-другу соответсвовать, не должно быть null, не должно быть такого, что в какой-то записи где-то что-то отсутствует.
    //Мы должны грамотно писать код, чтобы 1 записи с другими в таблице были грамотно построены.
    //3)Isolation(изолированность - Транзакции не влияют друг на друга)
    //Для ускорения работы клиентов с БД разработали параллельное чтение данных транзакций разных клиентов у друг друга.
    //Изоляция позволяет установить тот уровень, который позволяет читать данные транзакций друг друга.
    //Уровней всего 4(уровни изоляции транзакций):
        //1)READ UNCOMMITTED(грязное чтение) (означает, что транзакция в пределах текущей сессии может читать данные, которые модифицируются или удаляются другой транзакцией, но еще не зафиксированы ("не закоммичены"))
        //2)READ COMMITTED(по умолчанию для большинства запросов SQL Server)(транзакция в текущем сеансе не может читать данные, которые были модифицированы другой транзакцией)
        //3)REPEATABLE READ(как и в READ COMMITTED + накладывает ограничение, чтобы никакая другая транзакция не могла модифицировать данные, которые читаются, пока первая транзакция не завершит работу)
        //4)SERIALIZABLE(наиболее ограниченный уровень. Полностью блокирует параллельное чтение транзакций)(БД очень медленно работает, но очень надежная)
    //
    //4)Durability(прочность/надежность/стойкость - Записанные данные не потеряются)
    //Мы показываем пользователью какую-то инфомацию, во время обработки данных.
    //Может быть такое, что мы уже сказали клиенту, что например user сохранен в БД, а на самом деле
    //там ошибка. Поэтому мы должны писать код, предусматривая то, что если мы отдаем клиенту сообщение, что все хорошо,
    //то только тогда, когда это действительно хорошо. Главное - писать надежный код, и преждеверменно не уведомлять клиента.

    //Проблемы, которые возникают, при параллельном чтении транзакций((проблема)-(решение)):
        //1)Потерянное обновление(При одновременном изменении одного блока данных разными транзакциями одно из изменений теряется)-(все)
        //2)"Грязное" чтение(Чтение данных, добавленных или изменённых транзакцией, которая впоследствии не подтвердится (откатится))-(2)
        //3)Неповторяющееся чтение(Ситуация, когда при повторном чтении в рамках одной транзакции ранее прочитанные данные оказываются изменёнными)-(3)
        //4)Фантомное чтение(Ситуация, когда при повторном чтении в рамках одной транзакции одна и та же выборка дает разные множества строк)-(4)

    //Нормализация БД - это метод проектирования БД, который позволяет привести БД к минимальной избыточности/Правило дизайна наших таблиц
    //(Избыточность данных - состояние БД, при котором в таблицах присутствуют лишние данные)
    //Нормальная форма БД - набор правил, которым должна соответсвовать БД для оптимальной работы
    //Денормализация БД -  обычно проводится путем добавления избыточных данных в таблицу(которые по требованиям той
    //или иной нормальной формы должны выноситься в отдельную таблицу).(Данные обычно не связаны)
    //Пример:
    //Нам надо достать из таблицы users юзера, но если мы не создавали таблицу addresses, а засунули все в 1 таблицу
    //users, то обрабатывали бы лишние данные

    //Аномалии в БД - ситуация в БД, которая приводит к противоречиям в БД/усложняет обработку
    //Первые 3 нормальные формы:
        //1)1 НФ (Не должно быть больше 1 значения в 1 ячейке)(Вместо хранения данных какого-то юзера в ячейке в массиве,
        //лучше создать больше строк с одним юзером и его данными)
        //2)2 НФ (В одной таблице должны быть взаимосвязанные данные)(Делим таблицы)
        //3)3 НФ (2 НФ + Нужно делить таблицы по правилу транзитивности)(Например у нас есть сотрудник, отдел и телефон в одной таблице.
        //Следовательно сотрудник->отдел отдел->телефон сотрудник->телефон. Но наш телефон относится только к отделу, но не к сотруднику.
        //Следовательно делим таблицу на 2 таблицы Отдел-телфон; Сотрудник-Отдел)

}

public class Patterns {
    //В Java EE паттерны делятся на 3 группы:
    //
    //1)презентационный слой
    // (Front Controller)
    //Через него проходят все запросы, а он решает какой сервлет вызвать. Как фильтр, но он один единствененный.
    //.....................
    //2)бизнес логика
    //a)(Composite Entity/DTO(Data Transfer Object))
    //Обёрка из 2-3 других entity. Например когда на сервлет в req приходит много параметров
    //Класс, который содержит классы, как поля; потом мы передаем объект этого класса туда, где его "разбирают".
    //Или используют другой паттерн DTO(Data Transfer Object), он содержит не калссы, как поля, а поля этих entity, как поля
    //b)(Session Facade/Service Facade)
    //Такой же, как и обычный паттерн "Фасад"(смысл - скрыть сложность реализации),
    //но в отличие от обычного, этот - сессионный(можно выделить на каждого клиента свой собственный Session Facade)
    //c)(Value List Handler)
    //Например нам надо загрузить миллион фоток в ленту, но загружать сразу
    //все не выгодно. Мы будем загружать по несколько фоток на страницу, но
    //чтобы это все быстрее работало надо добавить кэш на нашу страницу, предыдущую и следующую.
    //Это все реализовывать в Dao не правильно, сделовательно, нам надо реализовать отдельный
    // класс типо итератора, который "дергает" Dao.
    //.....................
    //3)интеграционный слой(работа с внешними системами)
    // (DAO (Data Access Object))
    // (Вся информация о работе бд выносится в отдельный класс)
}

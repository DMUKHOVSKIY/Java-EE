public class Class {
    //Spring MVC(тоже самое, что и Spring Web) - отдельный модуль  Spring framework, который упрощает разработку приложений в вебе
    //Внутри Spring Web - находятся сервлеты
    //Помимо упрощения работы с вебом, добавлен Design Pattern (MVC - Model-View-Controller). Это больше архитектурный паттерн, который объясняет
    //о наличии 3-ёх абстрактных видах компонентов(фотка(Controller, Model, View)) и взаимодействия с ними. Этот паттерн внедрен в спринг веб
    //WebFlux - вариант реактивного стиля написания в спринге
    //Spring Web MVC - эволюция всего, что связано с сервлетами и веб EE
    //Dispatcher Servlet (фотка) - обычный сервлет. Для его работы полюбому понадобится какой-то application server/контейнер сервлетов
    //Поэтому надо подключать Tomcat

    //MVC - архитектурный паттерн, регламентирующий набор абстрактных компонентов и их взаимосвязь.
    //Когда в проекте есть архитектура, то проект поддерживать проще
    //MVC паттерн работает на уровне презентационного слоя. Паттерн не касается нашей бизнес логики, либо
    //логики работы с данными, с удалёнными сервисами и тд.
    //MVC паттерн работает на переднем слое/презентационном слое (сервлеты, фильтры, контроллеры)
    //Смысл фреймворков - нам дают абстракции, аннотации, упрощения и мы с ними работаем. Чтобы всё было быстрее
    //Любое веб приложение на любом языке сводится к тому, что нам надо вызвать с помощью 1 ПК вызывать функцию на другом ПК
    //Мы в контроллерах описываем те методы, которые удаленно какой-то клиент через браузер будет вызывать и получать какой-то результат
    //Мы используем Spring Web (Web MVC) и внутри этого модуля под капотом сервлеты -> мы обязаны использовать томкэт
    //Тем более мы как-то должны запускать наш диспатчер сервлет. Без томкэта мы не запустим наш сервлет.
    //Но в отличие от сервелтов нам дали controller, model, view, которые упрощают нам работу, скрыв от нас низкоуровневую реализацию сервлетов

    //Тема занятия: обработка исключений и валидация данных (например которые вводит пользователь)
    //Обработка исключений:
    //В консоли: мы выводим стэктрэйс и тушим программу
    //В вебе: мы работаем по блокирующей системе в томкэте -> на каждый коннект 1 поток.
    //Если вдруг пользователь отправляет запрос и видит проблему, он не должен увидеть проблему в стэктрэйсе
    //Валидация:
    //у спринга есть своя собственная реализация валидации, но реализовывать её сложно
    //поэтому мы используем вариант Java EE (спецификация Bean Validation)
    //Что включает в себя спецификация - набор аннотаций и некоторых других интерфейсов и тд.
    //Нас интересует набор аннотаций (Constraints/ограничения)
    //У нас их коробки есть аннотации, но чтобы они работали их надо подключить
    //Чтобы их подключить нам надо использовать имплементатор (Hibernate validator )

}

public class Class {
    //Spring Boot:
//Все библиотеки (модули) спринга подключаются или к Spring Boot или к Spring Framework
//У Spring Boot есть 1 из главных фич - автоматическая конфигурация (со сторонними библиотеками). Автоматическая конфигурация построена на основе стартеров
//Стартер - это такая же зависимость, как мы подключали в Maven, но она более умная. В ней
//есть компоненты, которые бут просканирует и что-то для себя решит. Стартер внутри помимо обычной зависимости имеет 2 вида файлов:
//autoconfiguration классы и property классы c дефолтными значениями. Следовательно нам не надо писать отдельный Configuration
//класс и писать там какие-нибудь бины и их конфигурировать. Но если для чего-то нет стартера. То мы должны подключать зависимость
//как в обычном фреймворк спринге или любом другом проекте на джава -> прописывать Configuration класс и там прописывать бины.
//Когда мы хотим подключить какую-то другую библиотеку, мы должны найти для неё стартер, а //не просто классическую эту библиотеку. Классическую надо в том случае, если нам ничего не //надо в этой библиотеке конфигурировать (например lombock)
//В остальном бут ничем не отличается от обычного фреймворка
//У бута, если мы подключаем стартер веб, то у нас автоматически уже будет встроен томкэт
//Следовательно, нам не надо устанавливать на сервере томкэт, а просто запустить приложение //на сервере
//В спринг буте метод мэйн есть
    //Основаня фишка 2: в autoconfiguration классах стартера уже прописаны дефолтные бины и дефолтная настройка (конфигурация из коробки)
    //Нам не надо прописывать @Configuration классы

    //В буте нет папки webapp -> мы все кладем в ресурсы (в static и template)
    //В папку static кладутся статические файлы (CSS, файлы джава скрипта, картинки)
    //В папку templates кладутся все наши (HTML, JSP в зависимости от шаблонизатора)

    //Ещё 1 фишка бута - легче переносить проекты с ПК на ПК

    //Иногда на проекте нам хочется знать о состоянии наших компонентов, либо о состоянии нашего приложения (трекать метрики о работе нашего приложения)
    //Актуатор помогает нам это сделать
    //Когда мы подключаем серьёзные зависимости (стартеры) для работы с БД в них уже открыты так называемые "поинты" у актуатора. И мы
    //можем получить необходимую информацию о состоянии наших компонентов внутри нашего приложения
    //actuator - нужен для сбора информации о работе нашего приложения удаленным образом либо через другие какие-нибудь библиотеки
    //Актуатор в сыром виде просто предоставляет какие-то урлы, черз которые мы можем отправить запрос и получить состояние
    //каих-то бинов, компонентов и тд.
    //Актуатор не располагает из-под капота какими-то HTML страницами, это больше API. Он дает нам возможность отправлять какие-то
    //HTTP запросы и получать JSON (актуатор изначально сделан под JSON) + можно подключить доп. сервисы и строить какие-нибудь графики и тд.

    //Мы можем в своем приложении написать собственный end point(актуатор точку) и отдавать информацию как актуатор (метод будет отдавать)
    //Это все делается в продакшене
}
public class Class {
    //Фреймворки(начало):
    //Мы работали с Socket, HttpServer, но сервелеты лучше, так как они помогают нам писать клиент-серверное приложение
    //и не задумываться о самом важном - о многопоточности
    //Библиотека - набор подпрограмм близкой функциональности, не влияет на архитектуру программного продукта и не
    //накладывает на неё никаких ограничений (просто помогает что-то сделать). Фреймворк, в отличие от библиотеки, это
    //скелет, каркас для нашего проекта, это набор библиотек.
    //Когда мы подключаем фреймворк, то должны использовать определенный подход к разработке. Фреймворк регламентирует
    //чёткую структуру(как начинается, как заканчивается, какие компоненты внутри)
    //Spring framework - фреймворк общего назначения и из-за этого он модульный. Центральный модуль - ядро(Spring core)
    //Мы подключаем тот модуль, который нам нужен.
    //В реактивных системах мы можем выдерживать больше нагрузки (в отличие от блокирующих)
    //Изначально надо выбрать с чем мы работаем Spring или SpringBoot (имеет автоконфигурации и тд)
    //Главный модуль Spring - ядро(Core Container), без него ничего не работает и к нему все подключается
    //Ядро - это обычный IoC(inversion of control) контейнер с реализацией Dependency Injection (DI). Этот контейнер ничего практически не умеет
    //(ни работать с бд, ни с вебом), кроме того, как хранить внутри себя объекты, создавать их и  связывать их между собой
    //Spring Container - это реализация (Dependency Inversion(SOLID)), но на "стероидах". Например мы засовываем в контейнер
    //конфигурацию (User, который внутри себя имеет cat, dog) -> контейнер создает экземпляры user, cat, dog и засовывает
    //cat и dog в юзера. На выходе мы имеем коробку и когда достаем из этой коробки нашего user он уже знает о cat и dog
    //IoC подход - типо дизайн паттерн, не ООП-шный принцип. Никакого функционала пользователю - нет.
    //IoC контейнер позволяет нам упростить контроль за нашими классами, типами и тд. (улучшает внутреннюю архитектуру проекта)
    //У Bean много этапов инициализации(фотка)
}
